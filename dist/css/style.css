html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

@media only screen and (min-width: 320px) {
  .section {
    background-color: #f4f4f4;
    overflow: hidden;
  }
  .section .container {
    margin: 0 auto;
    padding: 0 10px;
    max-width: 1200px;
  }
  .section .container .get-editor .heading {
    font-size: 32px;
    color: #8d81ac;
    margin: 34px 30px;
    line-height: 28px;
    font-weight: 700;
    text-align: center;
  }
  .section .container .get-editor .content {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
  }
  .section .container .get-editor .content__heading {
    margin: 29px 0 21px 0;
    font-size: 16px;
    color: #323232;
    font-weight: 400;
    font-family: 'Montserrat', sans-serif;
  }
  .section .container .get-editor .content__text {
    font-size: 16px -2;
    color: #848e97;
    margin: 0 20px 44px 20px;
    text-align: center;
    font-family: 'Lato', sans-serif;
    line-height: 15.406px;
  }
  .section .container .get-editor .editor {
    height: 381px;
    margin-top: 13px;
  }
}

@media only screen and (min-width: 401px) {
  .section .container .get-editor .heading {
    font-size: 42px;
    line-height: 40px;
  }
  .section .container .get-editor .content {
    position: relative;
  }
  .section .container .get-editor .content__heading {
    margin: 29px 0 21px 0;
    font-size: 16px;
    color: #323232;
    font-weight: 400;
    font-family: 'Montserrat', sans-serif;
  }
  .section .container .get-editor .content__text {
    font-size: 16px -2;
    color: #848e97;
    margin: 0 20px 44px 20px;
    text-align: center;
    font-family: 'Lato', sans-serif;
    line-height: 15.406px;
  }
  .section .container .get-editor .content__img {
    position: absolute;
    left: 0;
  }
  .section .container .get-editor .editor {
    height: 381px;
    margin-top: 13px;
  }
}

.section-users .container .slider {
  width: 100vw;
}

.section-users .container .slider .users {
  text-align: center;
  margin: 40px 0;
}

.section-users .container .slider .users__nick {
  display: block;
  margin: 20px;
}

.section-users .container .slider .users .slick-slide {
  width: 100vw;
}

.section-users .container .slider .users .slick-track {
  width: 50px;
}

.section-users .container .slider .users__img {
  display: inline-block;
}

.section-users .container .slider .users__text {
  width: 60vw;
  margin: 0 auto;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
